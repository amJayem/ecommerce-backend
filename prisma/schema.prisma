// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

model User {
  address      String   @default("N/A")
  avatarUrl    String? // Optional field
  createdAt    DateTime @default(now())
  email        String   @unique
  id           Int      @id @default(autoincrement())
  isVerified   Boolean  @default(false)
  name         String
  password     String
  phoneNumber  String? // Optional field
  role         String   @default("customer")
  refreshToken String? // ⬅️ hashed refresh token

  @@index([refreshToken])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String?   @unique // New field for SEO-friendly URLs
  description String
  price       Float
  salePrice   Float?   // New field for discounted price
  imageUrl    String?  // Keep existing field for backward compatibility
  coverImage  String?  // New field for main product image
  images      String[] @default([]) // New field for additional images array
  category    String?  // Keep existing field for backward compatibility
  categoryId  String?  // New field for category reference
  stock       Int      @default(0)
  status      String   @default("draft") // New field: 'draft' or 'published'
  tags        String[] @default([]) // New field for product tags
  sku         String?  // New field for stock keeping unit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFeatured  Boolean  @default(false)
  brand       String?
  discount    Float?
  weight      Float?
  orderItems  OrderItem[] // Relation to OrderItem for Prisma
}

model Order {
  id         Int         @id @default(autoincrement())
  // User is optional for now since user system is not implemented
  userId     Int?        // Will be null for guest orders
  status     String      @default("pending")
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}
